package com.stepic.lesson_3;import java.math.BigInteger;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Scanner;/** * Дано целое число 1≤n≤10 в 7, найти последнюю цифру n-го числа Фибоначчи. 0≤a,b≤9 — последние цифры чисел Fi и Fi+1 соответственно, то (a+b)mod10 — последняя цифра числа Fi+2. * * @author makson * */public class Fibonacci {    private static final HashMap<Integer, BigInteger> casheMap = new HashMap();    private static final List<BigInteger> casheList = new ArrayList<BigInteger>();    static {        casheList.add(BigInteger.ZERO);        casheList.add(BigInteger.ONE);    }    public static void main(String[] args) {        final long startTime = System.currentTimeMillis();//        getFibonacciAcrossScanner();//        System.out.println("Executed time " + (System.currentTimeMillis() - startTime) + " ms");//        final BigInteger fibonacci = getFibonacciAcrossHashMap(1000); // Executed time 2 ms//        System.out.println("Value is " + fibonacci + " Executed time " + (System.currentTimeMillis() - startTime) + " ms");        final BigInteger fibonacci = getFibonacciAcrossList(1000);    // Executed time 1 ms        System.out.println("Value is " + fibonacci + " Executed time " + (System.currentTimeMillis() - startTime) + " ms");    }    private static void getFibonacciAcrossScanner() {        final Scanner scanner = new Scanner(System.in);        final int n = scanner.nextInt();        int f_1 = 1;        int f_2 = 0;        int current = 0;        for (int i = 0; i < n; i++) {            current = f_1 + f_2;            f_2 = f_1;            f_1 = current;        }        System.out.println(f_2);        scanner.close();    }    private static BigInteger getFibonacciAcrossHashMap(int value) {        if (value < 2) {            return BigInteger.valueOf(value);        }        if (casheMap.containsKey(value)) {            return casheMap.get(value);        } else {            final BigInteger result = getFibonacciAcrossHashMap(value - 1).add(getFibonacciAcrossHashMap(value - 2));            casheMap.put(value, result);            return result;        }    }    private static BigInteger getFibonacciAcrossList(int value) {        for (int i = casheList.size(); i <= value; i++) {            final BigInteger result = casheList.get(i - 1).add(casheList.get(i - 2));            casheList.add(result);        }        return casheList.get(value);    }}